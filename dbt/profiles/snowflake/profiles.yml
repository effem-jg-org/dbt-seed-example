default:
  target: "{{ env_var('DBT_ENV_TARGET') }}"
  outputs:
    dev:
      type: "snowflake"
      account: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_ACCOUNT') }}"

      # User/password auth
      user: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_USER') }}"      # this will be substituted during build time
      password: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_PASSWORD') }}"  # this will be substituted during build time

      role: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_ROLE') }}"
      database: "{{ env_var('DBT_ENV_DATABASE') }}"
      warehouse: "{{ env_var('DBT_ENV_SNOWFLAKE_WAREHOUSE') }}"
      schema: "{{ env_var('DBT_ENV_SCHEMA') }}"
      threads: 1
      client_session_keep_alive: True
      querytag: [poc]

      # optional
      connect_retries: 0 # default 0
      connect_timeout: 10 # default: 10
      retry_on_database_errors: False # default: false
      retry_all: False  # default: false
      reuse_connections: True # default: True if client_session_keep_alive is False, otherwise None
    
    prod:
      type: "snowflake"
      account: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_ACCOUNT') }}"

      # User/password auth
      user: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_USER') }}"      # this will be substituted during build time
      password: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_PASSWORD') }}"  # this will be substituted during build time

      role: "{{ env_var('DBT_ENV_SECRET_SNOWFLAKE_ROLE') }}"
      database: "{{ env_var('DBT_ENV_DATABASE') }}"
      warehouse: "{{ env_var('DBT_ENV_SNOWFLAKE_WAREHOUSE') }}"
      schema: "{{ env_var('DBT_ENV_SCHEMA') }}"
      threads: 1
      client_session_keep_alive: True
      querytag: [poc]

      # optional
      connect_retries: 0 # default 0
      connect_timeout: 10 # default: 10
      retry_on_database_errors: False # default: false
      retry_all: False  # default: false
      reuse_connections: True # default: True if client_session_keep_alive is False, otherwise None